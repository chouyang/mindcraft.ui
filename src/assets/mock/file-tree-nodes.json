[
  {
    "name": "mindcraft.ui",
    "icon": "folder",
    "type": "folder",
    "path": "/",
    "caption": "~/Workspace/starvale.io/mindcraft.ui",
    "_opened": true,
    "children": [
      {
        "name": "api",
        "icon": "folder",
        "type": "folder",
        "path": "/mindcraft.ui",
        "children": []
      },
      {
        "name": "cmd",
        "icon": "folder",
        "type": "folder",
        "path": "/mindcraft.ui",
        "children": [
          {
            "name": "main.go",
            "icon": "go",
            "type": "file",
            "path": "/mindcraft.ui/cmd/mindcraft"
          },
          {
            "name": "wire.go",
            "icon": "go",
            "type": "file",
            "path": "/mindcraft.ui/cmd/mindcraft"
          },
          {
            "name": "wire_gen.go",
            "icon": "go",
            "type": "file",
            "path": "/mindcraft.ui/cmd/mindcraft"
          }
        ]
      },
      {
        "name": "mindcraft",
        "icon": "folder",
        "type": "folder",
        "path": "/mindcraft.ui/cmd",
        "children": []
      },
      {
        "name": "configs",
        "icon": "folder",
        "type": "folder",
        "path": "/mindcraft.ui",
        "children": []
      },
      {
        "name": "internal",
        "icon": "folder",
        "type": "folder",
        "path": "/mindcraft.ui",
        "children": []
      },
      {
        "name": "third_party",
        "icon": "folder",
        "type": "folder",
        "path": "/mindcraft.ui",
        "children": []
      },
      {
        "name": ".gitignore",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "Dockerfile",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "go.mod",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "go.sum",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "LICENSE",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "Makefile",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "openapi.yaml",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui"
      },
      {
        "name": "README.md",
        "icon": "file",
        "type": "file",
        "path": "/mindcraft.ui",
        "content": "import type Node from './Node'\nimport { useJetBrainsStore } from '@/stores/jetbrains.ts'\n\n/**\n * Tree structure to manage nodes\n *\n * Implemented as a doubly linked list for better management\n *   and Iterable to allow for-of traversal\n */\nexport default class Tree implements Iterable<Node> {\n  /**\n   * Iterator to traverse the tree nodes\n   */\n  [Symbol.iterator](): Iterator<Node> {\n    let current: Node | undefined = this.head\n    return {\n      next(): IteratorResult<Node> {\n        if (current) {\n          const value = current\n          current = current._next\n          return { value, done: false }\n        }\n        return { value: undefined, done: true }\n      },\n    }\n  }\n\n  /** Head of the tree */\n  head?: Node\n\n  /** Currently highlighted node */\n  highlighted?: Node\n\n  /** Initialize the tree with nodes data */\n  constructor(nodes: Array<Node>) {\n    this.traverse(nodes, undefined)\n    if (this.head?._lastChild) {\n      this.open(this.head._lastChild)\n      this.highlight(this.head._lastChild)\n    }\n  }\n\n  /** Traverse nodes recursively to set up relationships */\n  public traverse(nodes: Array<Node>, parent?: Node): void {\n    // Previous node in the traversal,\n    // the first child will be linked to the parent\n    let prev = parent\n\n    // Current node in the traversal\n    let node: Node | undefined\n    for (node of nodes) {\n      // Set head\n      if (!this.head) {\n        this.head = node\n      }\n\n      // Set parent's first child\n      if (parent && !parent._firstChild) {\n        parent._firstChild = node\n      }\n\n      // Set up relationships\n      node._prev = prev\n      node._parent = parent\n      node.indentation = parent ? (parent.indentation || 0) + 1 : 0\n      if (prev) {\n        prev._next = node\n      }\n      // Set prev for next iteration\n      prev = node\n\n      // Recurse into children\n      if (node.children && node.children.length) {\n        this.traverse(node.children, node)\n      }\n    }\n\n    // Set parent's last child\n    if (parent && !parent._lastChild) {\n      parent._lastChild = node\n    }\n  }\n\n  /** Highlight a node and unhighlight all others */\n  public highlight(node: Node) {\n    for (const n of this) {\n      if (n == node) {\n        // Set highlighted node\n        n._highlighted = true\n        this.highlighted = n\n      } else {\n        // Unset all other nodes\n        n._highlighted = false\n      }\n    }\n  }\n\n  /** Close a folder node */\n  public close(node: Node) {\n    if (node.type !== 'folder') {\n      return\n    }\n    node._opened = false\n    if (!node.children?.length) return\n    node._next = node._lastChild?._next\n    if (node._next) {\n      node._next._prev = node\n    }\n  }\n\n  /** Open a folder or file node */\n  public open(node: Node) {\n    if (node.type !== 'folder') {\n      useJetBrainsStore().open(node)\n      return\n    }\n    node._opened = true\n    if (!node.children?.length) return\n\n    const next = node._next\n    // Link to first child\n    node._next = node._firstChild\n    // Link first child back to parent\n    if (node._next) {\n      node._next._prev = node\n    }\n\n    if (!next) {\n      return\n    }\n    // Link next node to last child\n    next._prev = node._lastChild\n    // Link last child back to next node\n    if (node._lastChild) {\n      node._lastChild._next = next\n    }\n  }\n\n  public tryOpen(node: Node) {\n    if (node.type === 'folder') {\n      if (node._opened) {\n        this.close(node)\n      } else {\n        this.open(node)\n      }\n    } else {\n      useJetBrainsStore().open(node)\n    }\n  }\n}\n"
      }
    ]
  }
]